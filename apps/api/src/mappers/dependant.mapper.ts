import { Dependant, DependantData } from '../entities/dependant.entity';
import { ChildDto } from '../dto/family-members/child.dto';
import { SpouseDto } from '../dto/family-members/spouse.dto';
import { DependantRelationship } from '@prisma/client';
import { SharedMapperUtils } from './shared.mapper.utils';

/**
 * Mapper for converting between Dependant entities and DTOs
 * Handles the transformation between internal domain objects and external API contracts
 */
export class DependantMapper {
  /**
   * Convert ChildDto to Dependant entity
   * @param dto - Child DTO from external API
   * @param customerId - Customer ID this dependant belongs to
   * @param partnerId - Partner ID who created this dependant
   * @returns Dependant entity for internal use
   */
  static fromChildDto(
    dto: ChildDto,
    customerId: string,
    partnerId: string,
    isVerified: boolean = true // Default to true for POST /customers endpoint
  ): Dependant {
    const dependantData: DependantData = {
      id: '', // Will be generated by database
      customerId: customerId,
      firstName: dto.firstName,
      middleName: dto.middleName || null,
      lastName: dto.lastName,
      dateOfBirth: dto.dateOfBirth ? new Date(dto.dateOfBirth) : null,
      gender: SharedMapperUtils.mapGenderFromDto(dto.gender),
      idType: dto.idType ? SharedMapperUtils.mapIdTypeFromDto(dto.idType) : null,
      idNumber: dto.idNumber || null,
      relationship: DependantRelationship.CHILD,
      isVerified: isVerified,
      verifiedAt: isVerified ? new Date() : null,
      verifiedBy: null, // Will be set by verification process
      createdByPartnerId: partnerId,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    return new Dependant(dependantData);
  }

  /**
   * Convert SpouseDto to Dependant entity
   * @param dto - Spouse DTO from external API
   * @param customerId - Customer ID this dependant belongs to
   * @param partnerId - Partner ID who created this dependant
   * @returns Dependant entity for internal use
   */
  static fromSpouseDto(
    dto: SpouseDto,
    customerId: string,
    partnerId: string,
    isVerified: boolean = true // Default to true for POST /customers endpoint
  ): Dependant {
    const dependantData: DependantData = {
      id: '', // Will be generated by database
      customerId: customerId,
      firstName: dto.firstName,
      middleName: dto.middleName || null,
      lastName: dto.lastName,
      dateOfBirth: dto.dateOfBirth ? new Date(dto.dateOfBirth) : null,
      gender: SharedMapperUtils.mapGenderFromDto(dto.gender),
      idType: SharedMapperUtils.mapIdTypeFromDto(dto.idType),
      idNumber: dto.idNumber,
      relationship: DependantRelationship.SPOUSE,
      isVerified: isVerified,
      verifiedAt: isVerified ? new Date() : null,
      verifiedBy: null, // Will be set by verification process
      createdByPartnerId: partnerId,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    return new Dependant(dependantData);
  }

  /**
   * Convert Dependant entity to ChildDto
   * @param dependant - Dependant entity from internal domain
   * @returns Child DTO for external API
   */
  static toChildDto(dependant: Dependant): ChildDto {
    return {
      firstName: dependant.firstName,
      lastName: dependant.lastName,
      middleName: dependant.middleName || undefined,
      dateOfBirth: dependant.dateOfBirth?.toISOString().split('T')[0] || '',
      gender: SharedMapperUtils.mapGenderToDto(dependant.gender),
      idType: dependant.idType ? SharedMapperUtils.mapIdTypeToDto(dependant.idType) : undefined,
      idNumber: dependant.idNumber || undefined,
      isVerified: dependant.isVerified,
      verifiedAt: dependant.verifiedAt?.toISOString(),
      verifiedBy: dependant.verifiedBy || undefined,
    };
  }

  /**
   * Convert Dependant entity to SpouseDto
   * @param dependant - Dependant entity from internal domain
   * @returns Spouse DTO for external API
   */
  static toSpouseDto(dependant: Dependant): SpouseDto {
    return {
      firstName: dependant.firstName,
      lastName: dependant.lastName,
      middleName: dependant.middleName || undefined,
      dateOfBirth: dependant.dateOfBirth?.toISOString().split('T')[0] || '',
      gender: SharedMapperUtils.mapGenderToDto(dependant.gender),
      idType: dependant.idType ? SharedMapperUtils.mapIdTypeToDto(dependant.idType) : 'national',
      idNumber: dependant.idNumber || '',
      isVerified: dependant.isVerified,
      verifiedAt: dependant.verifiedAt?.toISOString(),
      verifiedBy: dependant.verifiedBy || undefined,
    };
  }

}
