import { Customer, CustomerData } from '../entities/customer.entity';
import { PrincipalMemberDto } from '../dto/principal-member/principal-member.dto';
import { CreatePrincipalMemberRequestDto } from '../dto/principal-member/create-principal-member-request.dto';
import { CreatePrincipalMemberResponseDto } from '../dto/principal-member/create-principal-member-response.dto';
import { CustomerStatus, OnboardingStep } from '@prisma/client';
import { SharedMapperUtils } from './shared.mapper.utils';

/**
 * Mapper for converting between Customer entities and DTOs
 * Handles the transformation between internal domain objects and external API contracts
 */
export class CustomerMapper {
  /**
   * Convert PrincipalMemberDto to Customer entity
   * @param dto - Principal member DTO from external API
   * @param partnerId - Partner ID who created this customer
   * @returns Customer entity for internal use
   */
  static fromPrincipalMemberDto(
    dto: PrincipalMemberDto, 
    partnerId: string
  ): Customer {
    const customerData: CustomerData = {
      id: '', // Will be generated by database
      firstName: dto.firstName,
      middleName: dto.middleName || null,
      lastName: dto.lastName,
      email: dto.email || '',
      phoneNumber: dto.phoneNumber || '',
      dateOfBirth: dto.dateOfBirth ? new Date(dto.dateOfBirth) : null,
      gender: SharedMapperUtils.mapGenderFromDto(dto.gender),
      idType: SharedMapperUtils.mapIdTypeFromDto(dto.idType),
      idNumber: dto.idNumber,
      status: CustomerStatus.PENDING_KYC,
      onboardingStep: OnboardingStep.BASIC_INFO,
      createdByPartnerId: partnerId,
      createdAt: new Date(),
      updatedAt: new Date(),
      createdBy: null,
      updatedBy: null,
    };

    return new Customer(customerData);
  }

  /**
   * Convert Customer entity to CreatePrincipalMemberResponseDto
   * @param customer - Customer entity from internal domain
   * @param partnerCustomerId - Partner's customer ID reference
   * @param correlationId - Correlation ID from request
   * @returns Response DTO for external API
   */
  static toCreatePrincipalMemberResponseDto(
    customer: Customer,
    partnerCustomerId: string,
    correlationId: string
  ): CreatePrincipalMemberResponseDto {
    return {
      status: 201, // HTTP status code
      correlationId: correlationId,
      message: 'Principal member created successfully',
      data: {
        principalId: customer.id,
        partnerCustomerId: partnerCustomerId,
        policy: {
          issued: false, // Will be updated when policy is created
          policyNumber: '', // Will be generated
          productCode: '', // Will be set from request
          productName: '', // Will be set from request
          status: 'pending'
        },
        payment: {
          productName: '', // Will be set from request
          dailyAmount: 0, // Will be calculated
          totalAmount: 0, // Will be calculated
          currency: 'KES'
        }
      }
    };
  }

  /**
   * Convert Customer entity to PrincipalMemberDto (for updates/retrieval)
   * @param customer - Customer entity from internal domain
   * @returns Principal member DTO for external API
   */
  static toPrincipalMemberDto(customer: Customer): PrincipalMemberDto {
    return {
      firstName: customer.firstName,
      lastName: customer.lastName,
      middleName: customer.middleName || undefined,
      dateOfBirth: customer.dateOfBirth?.toISOString().split('T')[0] || '',
      gender: SharedMapperUtils.mapGenderToDto(customer.gender),
      email: customer.email || undefined,
      phoneNumber: customer.phoneNumber || undefined,
      idType: SharedMapperUtils.mapIdTypeToDto(customer.idType),
      idNumber: customer.idNumber,
      partnerCustomerId: '', // This would need to be retrieved from PartnerCustomer table
    };
  }



  /**
   * Map customer status from Prisma enum to DTO string
   * @param status - Prisma CustomerStatus enum value
   * @returns Status string for DTO
   */
  private static mapStatusToDto(status: CustomerStatus): string {
    switch (status) {
      case CustomerStatus.PENDING_KYC:
        return 'pending_kyc';
      case CustomerStatus.KYC_VERIFIED:
        return 'kyc_verified';
      case CustomerStatus.ACTIVE:
        return 'active';
      case CustomerStatus.SUSPENDED:
        return 'suspended';
      case CustomerStatus.TERMINATED:
        return 'terminated';
      default:
        return 'pending_kyc'; // Default fallback
    }
  }

  /**
   * Map onboarding step from Prisma enum to DTO string
   * @param step - Prisma OnboardingStep enum value
   * @returns Onboarding step string for DTO
   */
  private static mapOnboardingStepToDto(step: OnboardingStep): string {
    switch (step) {
      case OnboardingStep.BASIC_INFO:
        return 'basic_info';
      case OnboardingStep.KYC_VERIFICATION:
        return 'kyc_verification';
      case OnboardingStep.PLAN_SELECTION:
        return 'plan_selection';
      case OnboardingStep.PAYMENT_SETUP:
        return 'payment_setup';
      case OnboardingStep.ACTIVE:
        return 'active';
      default:
        return 'basic_info'; // Default fallback
    }
  }
}
