import { Beneficiary, BeneficiaryData } from '../entities/beneficiary.entity';
import { BeneficiaryDto } from '../dto/family-members/beneficiary.dto';
import { SharedMapperUtils } from './shared.mapper.utils';

/**
 * Mapper for converting between Beneficiary entities and DTOs
 * Handles the transformation between internal domain objects and external API contracts
 */
export class BeneficiaryMapper {
  /**
   * Convert BeneficiaryDto to Beneficiary entity
   * @param dto - Beneficiary DTO from external API
   * @param customerId - Customer ID this beneficiary belongs to
   * @param partnerId - Partner ID who created this beneficiary
   * @returns Beneficiary entity for internal use
   */
  static fromBeneficiaryDto(
    dto: BeneficiaryDto,
    customerId: string,
    partnerId: string,
    isVerified: boolean = true // Default to true for POST /customers endpoint
  ): Beneficiary {
    const beneficiaryData: BeneficiaryData = {
      id: '', // Will be generated by database
      customerId: customerId,
      firstName: dto.firstName,
      middleName: dto.middleName || null,
      lastName: dto.lastName,
      dateOfBirth: dto.dateOfBirth ? new Date(dto.dateOfBirth) : null,
      gender: SharedMapperUtils.mapGenderFromDto(dto.gender),
      idType: SharedMapperUtils.mapIdTypeFromDto(dto.idType),
      idNumber: dto.idNumber,
      relationship: dto.relationshipDescription || dto.relationship,
      percentage: dto.percentage,
      isVerified: isVerified,
      verifiedAt: isVerified ? new Date() : null,
      verifiedBy: null, // Will be set by verification process
      createdByPartnerId: partnerId,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    return new Beneficiary(beneficiaryData);
  }

  /**
   * Convert Beneficiary entity to BeneficiaryDto
   * @param beneficiary - Beneficiary entity from internal domain
   * @returns Beneficiary DTO for external API
   */
  static toBeneficiaryDto(beneficiary: Beneficiary): BeneficiaryDto {
    return {
      firstName: beneficiary.firstName,
      lastName: beneficiary.lastName,
      middleName: beneficiary.middleName || undefined,
      dateOfBirth: beneficiary.dateOfBirth?.toISOString().split('T')[0] || '',
      gender: SharedMapperUtils.mapGenderToDto(beneficiary.gender),
      relationship: this.mapRelationshipToDto(beneficiary.relationship),
      relationshipDescription: this.getRelationshipDescription(beneficiary.relationship),
      email: undefined, // Not stored in entity, would need separate lookup
      phoneNumber: undefined, // Not stored in entity, would need separate lookup
      idType: SharedMapperUtils.mapIdTypeToDto(beneficiary.idType),
      idNumber: beneficiary.idNumber,
      percentage: beneficiary.percentage || 0,
      address: undefined, // Not stored in entity, would need separate lookup
      isVerified: beneficiary.isVerified,
      verifiedAt: beneficiary.verifiedAt?.toISOString(),
      verifiedBy: beneficiary.verifiedBy || undefined,
    };
  }

  /**
   * Map relationship from entity string to DTO enum value
   * @param relationship - Relationship string from entity
   * @returns Relationship string for DTO
   */
  private static mapRelationshipToDto(relationship: string | null | undefined): string {
    if (!relationship) return 'other';

    const lowerRel = relationship.toLowerCase();

    // Check if it's a standard relationship
    if (['spouse', 'child', 'parent', 'sibling', 'friend'].includes(lowerRel)) {
      return lowerRel;
    }

    // If it's a custom relationship, return 'other'
    return 'other';
  }

  /**
   * Get relationship description for custom relationships
   * @param relationship - Relationship string from entity
   * @returns Relationship description for DTO
   */
  private static getRelationshipDescription(relationship: string | null | undefined): string | undefined {
    if (!relationship) return undefined;

    const lowerRel = relationship.toLowerCase();

    // If it's a standard relationship, don't include description
    if (['spouse', 'child', 'parent', 'sibling', 'friend'].includes(lowerRel)) {
      return undefined;
    }

    // If it's a custom relationship, return the description
    return relationship;
  }
}
