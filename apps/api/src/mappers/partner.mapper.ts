import { Partner, PartnerData } from '../entities/partner.entity';

/**
 * Mapper for converting between Partner entities and DTOs
 * Handles the transformation between internal domain objects and external API contracts
 */
export class PartnerMapper {
  /**
   * Convert Partner entity to partner response DTO
   * @param partner - Partner entity from internal domain
   * @param correlationId - Correlation ID from request
   * @param isCreated - Whether this is a creation response (true) or retrieval response (false)
   * @returns Partner response DTO
   */
  static toPartnerResponseDto(
    partner: Partner,
    correlationId: string,
    isCreated: boolean = true
  ): {
    status: number;
    correlationId?: string;
    message: string;
    data: {
      id: number;
      partnerName: string;
      website?: string;
      officeLocation?: string;
      isActive: boolean;
      createdAt: string;
      updatedAt: string;
    };
  } {
    return {
      status: isCreated ? 201 : 200,
      correlationId: correlationId,
      message: isCreated ? 'Partner created successfully' : 'Partner already exists',
      data: {
        id: partner.id,
        partnerName: partner.partnerName,
        website: partner.website || undefined,
        officeLocation: partner.officeLocation || undefined,
        isActive: partner.isActive,
        createdAt: partner.createdAt.toISOString(),
        updatedAt: partner.updatedAt.toISOString(),
      },
    };
  }

  /**
   * Convert Partner entity to partner list item DTO
   * @param partner - Partner entity from internal domain
   * @returns Partner list item DTO
   */
  static toPartnerListItemDto(partner: Partner): {
    id: number;
    partnerName: string;
    website?: string;
    officeLocation?: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
  } {
    return {
      id: partner.id,
      partnerName: partner.partnerName,
      website: partner.website || undefined,
      officeLocation: partner.officeLocation || undefined,
      isActive: partner.isActive,
      createdAt: partner.createdAt.toISOString(),
      updatedAt: partner.updatedAt.toISOString(),
    };
  }

  /**
   * Convert partner creation request to partner data
   * @param requestData - Partner creation request data
   * @returns Partner data for entity creation
   */
  static fromCreatePartnerRequest(requestData: {
    partnerName: string;
    website?: string;
    officeLocation?: string;
  }): PartnerData {
    return {
      id: 0, // Will be generated by database
      partnerName: requestData.partnerName,
      website: requestData.website || null,
      officeLocation: requestData.officeLocation || null,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
      createdBy: null,
      updatedBy: null,
    };
  }
}
