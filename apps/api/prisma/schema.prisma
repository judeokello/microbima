// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

/// @seed="npx ts-node prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Partner {
  id              Int      @id @default(autoincrement())
  partnerName     String
  website         String?
  officeLocation  String?
  isActive        Boolean  @default(true)
  
  // Relations
  partnerContacts PartnerContact[]
  partnerCustomers PartnerCustomer[]
  partnerApiKeys  PartnerApiKey[]
  
  // Agent Registration relations
  brandAmbassadors      BrandAmbassador[]
  registrations         AgentRegistration[]
  missingRequirements   MissingRequirement[]
  deferredPartner       DeferredRequirementPartner[]
  baPayouts             BAPayout[]
  
  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?  // User ID who created
  updatedBy       String?  // User ID who last updated

  @@map("partners")
}

model PartnerApiKey {
  id          Int      @id @default(autoincrement())
  partnerId   Int
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  apiKey      String   // SHA-256 hashed API key
  isActive    Boolean  @default(true)
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([partnerId, isActive], name: "unique_active_key_per_partner") // Only one active key per partner
  @@index([apiKey], name: "idx_api_key_lookup") // For fast API key lookups
  @@map("partner_api_keys")
}

model PartnerContact {
  id              Int      @id @default(autoincrement())
  partnerId       Int
  partner         Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  contactName     String
  contactPhone    String   @db.VarChar(20) // Numeric phone number, max 20 characters
  contactEmail    String?
  isPrimary       Boolean  @default(false)
  
  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("partner_contacts")
}

model PartnerCustomer {
  id              Int      @id @default(autoincrement())
  partnerId       Int
  partner         Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  customerId      String   @db.Uuid
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  partnerCustomerId String // External partner customer ID (unique per partner)
  
  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([partnerId, partnerCustomerId]) // Unique combination of partner and partnerCustomerId
  @@map("partner_customers")
}

model Customer {
  id              String   @id @default(uuid()) @db.Uuid
  firstName       String   @db.VarChar(50)
  middleName      String?  @db.VarChar(50) // Optional middle name
  lastName        String   @db.VarChar(50)
  email           String?  @unique // Made nullable - when provided must be unique
  phoneNumber     String   @db.VarChar(20) // Numeric phone number, max 20 characters
  dateOfBirth     DateTime? @db.Date // Date only, no time component
  gender          Gender?  // Optional gender field
  idType          IdType
  idNumber        String   @db.VarChar(20) // Max 20 characters
  status          CustomerStatus @default(PENDING_KYC)
  onboardingStep  OnboardingStep @default(BASIC_INFO)
  createdByPartnerId Int // Partner who created this customer
  hasMissingRequirements Boolean @default(false)
  
  // Address information
  address         Address?
  
  // Dependants
  dependants      Dependant[]
  
  // Beneficiaries
  beneficiaries   Beneficiary[]
  
  // Onboarding progress
  onboardingProgress OnboardingProgress?
  
  // KYC information
  kycVerification KYCVerification?
  
  // Policies
  policies        Policy[]
  
  // Relations
  partnerCustomers PartnerCustomer[]
  
  // Agent Registration relations
  registrations         AgentRegistration[]
  missingRequirements   MissingRequirement[]
  
  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?  // User ID who created
  updatedBy       String?  // User ID who last updated

  @@unique([idType, idNumber], name: "unique_id_type_number") // Unique combination of idType and idNumber
  @@map("customers")
}

model Address {
  id          Int      @id @default(autoincrement())
  customerId  String   @unique @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  street      String
  city        String
  state       String
  postalCode  String
  country     String @default("KE") // Default to Kenya
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

model Dependant {
  id          String   @id @default(uuid()) @db.Uuid
  customerId  String   @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  firstName   String   @db.VarChar(50)
  middleName  String?  @db.VarChar(50) // Optional middle name
  lastName    String   @db.VarChar(50)
  dateOfBirth DateTime? @db.Date // Optional date of birth, date only
  gender      Gender?  // Optional gender field
  idType      IdType?  // Optional ID type for identification
  idNumber    String?  @db.VarChar(20) // Optional ID number for identification, max 20 characters
  relationship DependantRelationship
  isVerified  Boolean  @default(false) // Verification status
  verifiedAt  DateTime? // When verification was completed
  verifiedBy  String?   @db.Uuid // Who verified (user ID)
  createdByPartnerId Int // Partner who created this dependant
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("dependants")
}

model Beneficiary {
  id          String   @id @default(uuid()) @db.Uuid
  customerId  String   @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  firstName   String   @db.VarChar(50)
  middleName  String?  @db.VarChar(50) // Optional field
  lastName    String   @db.VarChar(50)
  dateOfBirth DateTime? @db.Date // Optional date of birth, date only
  gender      Gender?  // Optional field
  email       String?  @db.VarChar(100) // Optional email
  phoneNumber String?  @db.VarChar(20) // Optional phone number
  idType      IdType
  idNumber    String   @db.VarChar(20) // Max 20 characters
  relationship String? // Relationship to principal member
  relationshipDescription String? // Optional description for "other" relationship
  percentage  Int?     // Percentage of benefits (1-100)
  isVerified  Boolean  @default(false) // Verification status
  verifiedAt  DateTime? // When verification was completed
  verifiedBy  String?   @db.Uuid // Who verified (user ID)
  createdByPartnerId Int // Partner who created this beneficiary
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("beneficiaries")
}

model OnboardingProgress {
  id          Int      @id @default(autoincrement())
  customerId  String   @unique @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  currentStep OnboardingStep
  completedSteps OnboardingStep[]
  nextStep    OnboardingStep?
  estimatedCompletion DateTime?
  
  // Step-specific data
  basicInfoCompleted    Boolean @default(false)
  kycCompleted         Boolean @default(false)
  planSelected         Boolean @default(false)
  paymentSetupCompleted Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("onboarding_progress")
}

model KYCVerification {
  id          Int      @id @default(autoincrement())
  customerId  String   @unique @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  status      KYCStatus @default(PENDING)
  verificationMethod KYCVerificationMethod
  documents   Json?    // Array of document references
  verifiedAt  DateTime?
  verifiedBy  String?  // User ID who verified
  
  // KYC provider response
  providerReference String?
  providerResponse Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("kyc_verifications")
}

model Policy {
  id          String   @id @default(uuid()) @db.Uuid
  customerId  String   @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  policyNumber String  @unique
  productName  String
  planName     String
  status       PolicyStatus @default(ACTIVE)
  startDate    DateTime
  endDate      DateTime?
  premium      Decimal  @db.Decimal(10, 2)
  frequency    PaymentFrequency
  paymentCadence Int    // Number of days between premium payments
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("policies")
}

enum CustomerStatus {
  PENDING_KYC
  KYC_VERIFIED
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum OnboardingStep {
  BASIC_INFO
  KYC_VERIFICATION
  PLAN_SELECTION
  PAYMENT_SETUP
  ACTIVE
}

enum IdType {
  NATIONAL_ID
  PASSPORT
  ALIEN
  BIRTH_CERTIFICATE
  MILITARY
}

enum DependantRelationship {
  SPOUSE
  CHILD
  PARENT
  SIBLING
  FRIEND
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum KYCStatus {
  PENDING
  IN_PROGRESS
  VERIFIED
  REJECTED
  EXPIRED
}

enum KYCVerificationMethod {
  MANUAL
  AUTOMATED
  THIRD_PARTY
}

enum PolicyStatus {
  ACTIVE
  SUSPENDED
  TERMINATED
  EXPIRED
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  CUSTOM
}

// New enums for Agent Registration module
enum RegistrationEntityKind {
  CUSTOMER
  SPOUSE
  CHILD
  BENEFICIARY
}

enum RegistrationStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RegistrationMissingStatus {
  PENDING
  RESOLVED
  EXPIRED
}

enum BAPayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Agent Registration Models
model BrandAmbassador {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                String   @unique @db.Uuid // Supabase user ID
  partnerId             Int
  partner               Partner  @relation(fields: [partnerId], references: [id])
  
  displayName           String
  phoneNumber           String?  @db.VarChar(20)
  perRegistrationRateCents Int   // Rate in cents (e.g., 500 = 5.00 KES)
  isActive              Boolean  @default(true)
  
  // Relations
  registrations         AgentRegistration[]
  payouts              BAPayout[]
  
  // Audit fields
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String?  // User ID who created
  updatedBy            String?  // User ID who last updated

  @@map("brand_ambassadors")
}

model AgentRegistration {
  id                    String   @id @default(uuid()) @db.Uuid
  baId                  String   @db.Uuid
  customerId            String   @db.Uuid
  partnerId             Int
  
  ba                    BrandAmbassador @relation(fields: [baId], references: [id])
  customer              Customer @relation(fields: [customerId], references: [id])
  partner               Partner @relation(fields: [partnerId], references: [id])
  
  registrationStatus    RegistrationStatus @default(IN_PROGRESS)
  completedAt           DateTime?
  
  // Relations
  missingRequirements   MissingRequirement[]
  payouts              BAPayout[]
  
  // Audit fields
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("agent_registrations")
}

model MissingRequirement {
  id                    String   @id @default(uuid()) @db.Uuid
  registrationId        String   @db.Uuid
  customerId            String   @db.Uuid
  partnerId             Int
  
  entityKind            RegistrationEntityKind
  entityId              String?  // ID of spouse/child/beneficiary if applicable
  fieldPath             String   // e.g., "firstName", "gender", "idNumber"
  status                RegistrationMissingStatus @default(PENDING)
  
  registration          AgentRegistration @relation(fields: [registrationId], references: [id])
  customer              Customer @relation(fields: [customerId], references: [id])
  partner               Partner @relation(fields: [partnerId], references: [id])
  
  resolvedAt            DateTime?
  resolvedBy            String?  // User ID who resolved
  
  // Audit fields
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("missing_requirements")
}

model BAPayout {
  id                    String   @id @default(uuid()) @db.Uuid
  baId                  String   @db.Uuid
  registrationId        String?  @db.Uuid // Optional - can be general payout
  partnerId             Int
  
  amountCents           Int      // Amount in cents
  status                BAPayoutStatus @default(PENDING)
  payoutDate            DateTime?
  reference             String?  // Payment reference
  
  ba                    BrandAmbassador @relation(fields: [baId], references: [id])
  registration          AgentRegistration? @relation(fields: [registrationId], references: [id])
  partner               Partner @relation(fields: [partnerId], references: [id])
  
  // Audit fields
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("ba_payouts")
}

model DeferredRequirementDefault {
  id                    Int      @id @default(autoincrement())
  entityKind            RegistrationEntityKind
  fieldPath             String
  isRequired            Boolean  @default(true)

  @@unique([entityKind, fieldPath])
  @@map("deferred_requirements_default")
}

model DeferredRequirementPartner {
  id                    Int      @id @default(autoincrement())
  partnerId             Int
  entityKind            RegistrationEntityKind
  fieldPath             String
  isRequired            Boolean  @default(true)

  partner               Partner @relation(fields: [partnerId], references: [id])

  @@unique([partnerId, entityKind, fieldPath])
  @@map("deferred_requirements_partner")
}
